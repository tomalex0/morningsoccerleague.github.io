{"version":3,"sources":["webpack:///../src/components/lazy-hydrate.tsx"],"names":["lazyHydrate","root","hydrated","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","props","width","height","layout","images","placeholder","backgroundColor","current","hasSSRHtml","querySelector","hasNativeLazyLoadSupport","cacheKey","JSON","stringify","hasLoaded","hasImageLoaded","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","getMainProps","render","hydrate"],"mappings":"2MAqBgBA,IAUdC,EACAC,OATEC,UACAC,YACAC,cACAC,aACAC,mBACAC,QACGC,mFAKGC,EAAgEP,EAAhEO,MAAOC,EAAyDR,EAAzDQ,OAAQC,EAAiDT,EAAjDS,OAAQC,EAAyCV,EAAzCU,OAAQC,EAAiCX,EAAjCW,YAAaC,EAAoBZ,EAApBY,gBAEpD,IAAKd,EAAKe,QACR,OAAO,KAGT,IAAMC,EAAahB,EAAKe,QAAQE,yCAEhC,GAAIC,KAA4BF,IAAef,EAASc,QACtD,OAAO,KAGT,IAAMI,EAAWC,KAAKC,UAAUT,GAC1BU,GAAarB,EAASc,SAAWQ,YAAeJ,GAEhDK,EACJC,kBAACC,KAAcf,OAAQA,EAAQF,MAAOA,EAAOC,OAAQA,IACjDY,GACAG,kBAACE,qBACKC,YACFf,EACAR,EACAM,EACAF,EACAC,EACAI,KAINW,kBAACI,qBACMrB,EACDsB,YACF1B,EACAkB,GAAajB,EACbO,EACAT,EACAG,EACAa,EACAZ,MAUR,OAJiBN,EAASc,QAAUgB,SAASC,WACpCR,EAAWxB,EAAKe,SACzBd,EAASc,WAAU,WAGbf,EAAKe,SACPgB,iBAAQ,KAAkC/B,EAAKe","file":"21-bedc26056bc75506f8c7.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport {\n  getMainProps,\n  getPlaceholderProps,\n  hasNativeLazyLoadSupport,\n  hasImageLoaded,\n} from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: Function\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>\n): (() => void) | null {\n  const { width, height, layout, images, placeholder, backgroundColor } = image\n\n  if (!root.current) {\n    return null\n  }\n\n  const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n  // On first server hydration do nothing\n  if (hasNativeLazyLoadSupport && hasSSRHtml && !hydrated.current) {\n    return null\n  }\n\n  const cacheKey = JSON.stringify(images)\n  const hasLoaded = !hydrated.current && hasImageLoaded(cacheKey)\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      {!hasLoaded && (\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            isLoaded,\n            layout,\n            width,\n            height,\n            backgroundColor\n          )}\n        />\n      )}\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        {...getMainProps(\n          isLoading,\n          hasLoaded || isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  const doRender = hydrated.current ? render : hydrate\n  doRender(component, root.current)\n  hydrated.current = true\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"sourceRoot":""}