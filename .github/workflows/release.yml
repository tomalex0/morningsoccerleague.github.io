# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    branches: [ gatsby ]

jobs:
  release:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Cache Npm
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set Package Version
        id: getpkgversion
        run: |
          content=`cat ./package.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      - name: Get Package Version
        run: |
          echo "${{fromJson(steps.getpkgversion.outputs.packageJson).version}}"
      - name: Verify Release Tag
        run: |
          REF_RESPONSE=$(git tag)
          VER=${{fromJson(steps.getpkgversion.outputs.packageJson).version}}
          echo $REF_RESPONSE
          # echo $VER
          if [[ "$REF_RESPONSE" == *"$VER"* ]]; then
            echo "Release Tag $VER Already Exists"
            exit 1
          else
            echo "Release Tag $VER does not Exists"
          fi
      - name: Install Dependencies
        run: |
          npm ci
      - name: Build Application
        run: |
          npm run build -- --prefix-paths  --log-pages
      - name: Zip Public Folder
        run: |
          zip -r gatsby-build.zip public
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{fromJson(steps.getpkgversion.outputs.packageJson).version}}
          release_name: Release ${{fromJson(steps.getpkgversion.outputs.packageJson).version}}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./gatsby-build.zip
          asset_name: gatsby-build.zip
          asset_content_type: application/zip
